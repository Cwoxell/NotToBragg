# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FBG_start.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.




'''
This is carly here, this will be where I will give a breif explanation of the code as well as its placement in the flowgraph.

HOME PAGE

this will hold all code for opening and closing windows. this window will not close so that at any time the user can go back to the start.

it will only contain a continue push button






need to add;
    fix textbox thingies look weird
add user instruction for alignemnet?





###############################variables to be added everywhere
self.n = 0  #index of refraction

self.minH = 0 #min inscription height
self.maxH = 0  # max inscription height

self.length = 0 #length of inscription

self.bs = 0 #bragg spacing in nm

self.order = 1  #order

self.power = 4 #power placeholder 


'''

from PyQt5.QtSerialPort import QSerialPort
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QIODevice
import serial.tools.list_ports
from pylablib.devices import Thorlabs

from FBG_fiber import Ui_Form as FBG_fiber #importing main class of FBG_fiber.py and to avoid having multiple "Ui_form"s we're "importing as" to give it a new name (could be any name you want)
from FBG_who import Ui_Form as FBG_who #so now FBG_who can be used to instantiate Ui_Form class from FBG_who.py
from FBG_basic_start import Ui_Form as basic_start
from FBG_advanced_start import Ui_Form as advanced_start

from FBG_imaging import Ui_Form as FBG_imaging
from FBG_etching import Ui_Form as FBG_etching
from FBG_end import Ui_Form as FBG_end

class Ui_MainWindow(object):

    def clicked_continue(self):
        self.window = QtWidgets.QWidget() #type
        self.ui = FBG_fiber() #class name
        #self.window is FBG_fiber, MainWindow is this guy, now include other immported guys
        self.ui.setupUi(self.window, MainWindow, FBG_who, basic_start, advanced_start, FBG_imaging, FBG_etching, FBG_end)
        self.window.show() # opens this new window 
        MainWindow.hide() # hides this window

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1074, 869)
        MainWindow.setStyleSheet("QMainWindow {\n"
"    background-color:rgb(23, 17, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QMenuBar {\n"
"    background-color: #2ecc71; /* Green background color for the menu bar */\n"
"    color: white; /* Text color for menu items */\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.clicked_continue())
        self.pushButton.setGeometry(QtCore.QRect(390, 720, 241, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton {\n"
"    background-color: #3498db; /* Blue background color */\n"
"    color: #ffffff; /* White text color */\n"
"    border-radius: 15px; /* Rounded corners */\n"
"    padding: 10px; /* Padding around the content */\n"
"    width: 100px; /* Set a specific width */\n"
"    height: 40px; /* Set a specific height */\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 60, 411, 81))
        font = QtGui.QFont()
        font.setFamily("STCaiyun")
        font.setPointSize(43)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel{\n"
"color:rgb(255, 0, 127)\n"
"\n"
"}")
        self.label.setObjectName("label")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(50, 340, 961, 151))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setStyleSheet("QPlainTextEdit{\n"
"color:white;\n"
" background-color:rgb(23, 17, 57);\n"
"}")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(940, 810, 131, 21))
        font = QtGui.QFont()
        font.setFamily("New Gulim")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("QLabel{\n"
"color:rgb(255, 0, 127)\n"
"}")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(310, 150, 81, 61))
        font = QtGui.QFont()
        font.setFamily("STCaiyun")
        font.setPointSize(43)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("QLabel{\n"
"color:rgb(255, 0, 127)\n"
"\n"
"}")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(360, 220, 691, 71))
        font = QtGui.QFont()
        font.setFamily("STCaiyun")
        font.setPointSize(43)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("QLabel{\n"
"color:rgb(255, 0, 127)\n"
"\n"
"}")
        self.label_4.setObjectName("label_4")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(50, 500, 961, 191))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.plainTextEdit_2.setFont(font)
        self.plainTextEdit_2.setStyleSheet("QPlainTextEdit{\n"
"color:white;\n"
" background-color:rgb(23, 17, 57);\n"
"}")
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Continue"))
        self.label.setText(_translate("MainWindow", "WELCOME"))
        self.plainTextEdit.setPlainText(_translate("MainWindow", "Welcome to your Fiber Bragg Grating etching experience!\n"
"\n"
"This program will step you through the fiber and grating selection process. \n"
"\n"
"When the etching process is complete, the program will output a picture of your etching, as well as a text file with all expected parameters."))
        self.label_2.setText(_translate("MainWindow", "NotToBragg"))
        self.label_3.setText(_translate("MainWindow", "To "))
        self.label_4.setText(_translate("MainWindow", "Fiber Bragg Gratings!"))
        self.plainTextEdit_2.setPlainText(_translate("MainWindow", "Manual Two Mirror Alignment:\n"
                "Please Locate the two levels near the optical head on the microscope. We will refer to these as Iris 1 and Iris 2. Iris 2 will be the closest lever to the optical head. Now locate the two mirrors in the laser's path. The first mirror in the path will be Mirror 1 and the second, Mirror 2. \n"
                "Ensure both Iris 1 and Iris 2 start in their open postion, the lever pulled horizonal. Now, close Iris 2 and move the Mirror 2 alignment nobs until the most light is seen out of the optical head. Repeat with Iris 1 and Mirror 1. Repeat these steps until there is the most light being allowed through with both Irises in their closed position.")) 


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
