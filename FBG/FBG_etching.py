








# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FBG_etching.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

'''

need to add a way for user to watch the etching happen maybe?
'''



from PyQt5.QtSerialPort import QSerialPort
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QIODevice
import serial.tools.list_ports
from pylablib.devices import Thorlabs




class Ui_Form(object):

    def __init__(self, n, minH, maxH, bs, period, height, power, order, stageX,stageY):
        self.n = n                      #index of refraction
        self.minH = minH   
        self.maxH = maxH
        self.bs =bs                            #bragg wavelenght
        self.period=period                      #period
        self.height = height                    #inscription length
        self.power = power                      #power attenuation
        self.order = order      
        self.stageY=stageY
        self.stageX=stageX

        print(self.n)
        print(self.minH)
        print(self.maxH)
        print(self.bs)
        print(self.period)
        print(self.height)
        print(self.power)
        print(self.order)
 
        
    def clicked(self, FBG_etching_info, MainWindow_info, FBG_end_info):
        
               #from spec sheet
        
        pos_scaling = 34550
        vel_scaling = 767367.49
        accel_scaling = 261.93

        #from deive
        device_scaleX = self.stageX.get_scale()
        device_scaleY = self.stageY.get_scale()

        #scaling uses spec sheet and device
        pos_scalingX = pos_scaling / device_scaleX[0]
        vel_scalingX = vel_scaling / device_scaleX[1]
        accel_scalingX = accel_scaling / device_scaleX[2]

        pos_scalingY = pos_scaling / device_scaleY[0]
        vel_scalingY = vel_scaling / device_scaleY[1]
        accel_scalingY = accel_scaling / device_scaleY[2]
        
        braggWavelength = self.bs*1E-9
        inscriptionLength = self.height*1E-6
        numPeriods = self.period
        refIndex = self.n
        braggOrder = self.order
        laserRepRate = 1000 #pulses per second
        inscriptionPulses = 300
        inbetweenPulses = 60

        gratingPeriod = braggOrder*braggWavelength/2/refIndex #capital lamda
        inscriptionSpeedY = inscriptionLength/inscriptionPulses*laserRepRate*1000
        inbetweenSpeedY = inscriptionLength/inbetweenPulses*laserRepRate*1000
        inbetweenSpeedX = gratingPeriod/inbetweenPulses*laserRepRate*1000 #multiply by 1000 twice because bragg wavelength in nm and progam input in mm
        totalLength = gratingPeriod * numPeriods

        if totalLength >= 17E-3:
                print("Total length is too long. Reduce number of periods or order of grating. Aborting.")
                exit()


        for i in range(numPeriods): ###idea add progress bar based off of i iterations###
                self.progressBar.setValue(i+1)


                self.stageX.setup_velocity(min_velocity=0,acceleration=(inbetweenSpeedX*accel_scalingX),max_velocity=(inbetweenSpeedX*vel_scalingX))
                self.stageY.setup_velocity(min_velocity=0,acceleration=(inscriptionSpeedY*accel_scalingY),max_velocity=(inscriptionSpeedY*vel_scalingY))

                if i == 0:
                        self.stageY.move_by(0.5*inscriptionLength*1000*pos_scalingY) # Start with half movement because assuming centered on core
                else:
                        self.stageY.move_by(inscriptionLength*1000*pos_scalingY) # Multiply by 1000 because stage setup to take mm and user inpu in um

                self.stageY.wait_move()

                print("Stage Y Done moving.")
                print("I'm at " + str(round((self.stageY.get_position()/34304),3))+ " mm\n")

                self.stageY.setup_velocity(min_velocity=0,acceleration=(inbetweenSpeedY*accel_scalingY),max_velocity=(inbetweenSpeedY*vel_scalingY))

                self.stageX.move_by(gratingPeriod*1000*pos_scalingX)
                self.stageY.move_by(-inscriptionLength*1000*pos_scalingY)

                print("Xmove by:")
                print(gratingPeriod*1000)
                print("\n")

                print("Xaccel is:")
                print(inbetweenSpeedX)
                print("\n")

                print("Xvelocity is")
                print(inbetweenSpeedX)
                print("\n")

                print("Ymove by:")
                print(inscriptionLength*1000)
                print("\n")

                print("Yaccel is:")
                print(inbetweenSpeedY)
                print("\n")

                print("Yvelocity is")
                print(inbetweenSpeedY)
                print("\n")

                self.stageX.wait_move()
                self.stageY.wait_move()

                print("Stage X Done moving.")
                print("I'm at " + str(round((self.stageX.get_position()/34304),3))+ " mm\n")
                print("Stage Y Done moving.")
                print("I'm at " + str(round((self.stageY.get_position()/34304),3))+ " mm\n")


                if ((self.stageX.get_position()/34304) >= 17): #at 18mm lens runs into fiber holder
                        print("Total length is too long. Reduce number of periods or order of grating. Aborting.")
                        exit()


        
        self.window = QtWidgets.QWidget() #type
        self.ui = FBG_end_info(self.n, self.minH, self.maxH, self.bs, self.period, self.height, self.power, self.order) #class name
        self.ui.setupUi(self.window, MainWindow_info)#, FBG_etching_info, FBG_end_info)
        self.window.show() # opens this new window 
        FBG_etching_info.hide() # hides this window
        

    def setupUi(self, Form, MainWindow, FBG_end):
        Form.setObjectName("Form")
        Form.resize(1077, 904)
        Form.setStyleSheet("QWidget{\n"
"\n"
"background-color:rgb(23, 17, 57)\n"
"}")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(210, 180, 661, 101))
        font = QtGui.QFont()
        font.setFamily("STCaiyun")
        font.setPointSize(32)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("QLabel{\n"
"color:rgb(255, 0, 127)\n"
"}")
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(Form, clicked = lambda: self.clicked(Form, MainWindow, FBG_end))
        self.pushButton.setGeometry(QtCore.QRect(430, 480, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("QPushButton {\n"
"    background-color: #3498db; /* Blue background color */\n"
"    color: #ffffff; /* White text color */\n"
"    border-radius: 15px; /* Rounded corners */\n"
"    padding: 10px; /* Padding around the content */\n"
"    width: 100px; /* Set a specific width */\n"
"    height: 40px; /* Set a specific height */\n"
"}")
        self.pushButton.setObjectName("pushButton")
        self.progressBar = QtWidgets.QProgressBar(Form)
        self.progressBar.setGeometry(QtCore.QRect(380, 570, 341, 61))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.progressBar.setFont(font)
        self.progressBar.setStyleSheet("QProgressBar {\n"
"    border: 2px solid #3498db;\n"
"    border-radius: 5px;\n"
"    background-color: white;\n"
"    text-align: center;\n"
"\n"
"}\n"
"QProgressBar::chunk {\n"
"    background-color: #3498db;\n"
"    width: 20px; /* Set the width of the progress indicator */\n"
"    \n"
"}")
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(self.period)


        self.plainTextEdit = QtWidgets.QPlainTextEdit(Form)
        self.plainTextEdit.setGeometry(QtCore.QRect(270, 320, 261, 91))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setStyleSheet("QPlainTextEdit {\n"
"    color: white;\n"
"}")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(Form)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(550, 300, 301, 141))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.plainTextEdit_2.setFont(font)
        self.plainTextEdit_2.setStyleSheet("QPlainTextEdit {\n"
"    color: white;\n"
"}")
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_2.setText(_translate("Form", "Ready to etch your grating?"))
        self.pushButton.setText(_translate("Form", "Etch it!"))
        self.plainTextEdit.setPlainText(_translate("Form", "Check your parameters!\n"
"\n"
"Does this look correct?"))
        self.plainTextEdit_2.setPlainText(_translate("Form", "Bragg Wavelength: "+ str(self.bs) +"\n"
"Inscription Height: "+ str(self.height) +"\n"
"                Period: "+ str(self.period) +"\n"
"                 Power: "+ str(self.power) +"\n"
"                  Order: "+ str(self.order) +"\n"
""))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())









